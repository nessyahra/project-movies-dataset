# -*- coding: utf-8 -*-
"""Project Movie Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sJRItAEMeHLaOyZuLj3EUxQ2c5sSHVKo

# **Questions About Informations**

*   Film dengan score tertinggi?
*   Genre yang paling banyak difilmkan
*   Jumlah film yang dirilis per tahunnya
*   Film dengan pendapatan terbesar?
*   Hubungan antara budget dengan pendapatan?
*   Hal yang mempengaruhi pendapatan?

# **Importing Data**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

movies = pd.read_csv('movies_updated.csv')
movies.head()

"""**Assesing Data**"""

movies.info()

missing_values = movies.isnull().sum()
print(missing_values[missing_values>0])

"""# **Cleaning Data**

**Check Duplicate**
"""

# Drop duplikat
movies.duplicated().value_counts()
movies.drop_duplicates(inplace=True)

"""**Handling Missing Values**"""

# Replace missing values in rating and gross with median
movies['gross'] = movies['gross'].fillna(movies['gross'].median())

# Replace missing value rating with mode
movies['rating'] = movies['rating'].fillna(movies['rating'].mode()[0])
movies['writer'] = movies['writer'].fillna(movies['writer'].mode()[0])
movies['star'] = movies['star'].fillna(movies['star'].mode()[0])
movies['company'] = movies['company'].fillna(movies['company'].mode()[0])

"""# **EDA**"""

movies.describe()

"""**The most favourite film by votes**"""

top10_movies = movies.groupby('name')['score'].mean().sort_values(ascending = False)
top10 = top10_movies.head(10)
top10

plt.figure(figsize=(10,5))
sns.barplot(
    y = top10.index,
    x = top10.values,
    palette = sns.color_palette('Set1', 10)
)
plt.title('Top 10 Movies', loc='center', fontsize = 15)
plt.ylabel(None)
plt.xlabel(None)

for i, count in enumerate(top10.values):
    plt.text(count/2, i, count, ha='left', va='center', color='black', fontweight='medium')

plt.tick_params(axis='x', labelsize=12)
plt.show()

"""Berdasarkan grafik di atas diperoleh sepuluh film dengan skor tertinggi dengan "The Shawshank Redemption" yang menduduki peringkat pertama.

**Popular Genre**
"""

genre_count = movies.groupby('genre')['name'].count().sort_values(ascending=False).head(10)
genre_count

plt.figure(figsize=(10,5))
sizes = genre_count.values
labels = genre_count.index
plt.pie(
    sizes,
    labels = labels,
    autopct = '%1.0f%%'
)
plt.title('Popular Genre', loc='center', fontsize=15)
plt.show()

"""Berdasarkan grafik di atas dapat diketahui berapa banyak film dengan variasi genre untuk 10 genre dengan film terbanyak. Dapat dilihat bahwa genre comedy menjadi genre dengan film paling banyak sekitar 34% dari total film.

**The Movies Production Per Year**
"""

year_movies = movies['year'].value_counts().sort_index().reset_index()
year_movies.columns = ['year', 'count']

plt.figure(figsize=(10,5))
sns.barplot(
    data = year_movies,
    x = 'year',
    y = 'count',
    palette = 'pastel'
)
plt.title('Total Movie Production per Year', loc='center', fontsize = 15)

"""**Movies with Bigh Revenues**"""

revenues = movies.sort_values(by='gross', ascending=False).reset_index().head(10)
print(revenues[['name', 'gross']])

"""**Correlation Between Budget and Gross**"""

correlation = movies[['gross', 'budget']].corr()
print(correlation)

"""Berdasarkan hasil korelasi di atas diperoleh bahwa terdapat korelasi sebesar 0.582 yang dapat diartikan bahwa tingginya budget film juga akan memberikan peningkatan pada pendapatan film. Dapat dilihat dari plot di bawah ini bahwa korelasi antara budget dan gross menunjukkan korelasi positif."""

plt.figure(figsize=(10,5))
sns.regplot(data=movies, x='budget', y='gross', line_kws={'color' : 'red'})
plt.title('Correlation Between Budget and Gross')
plt.ylabel('Gross')
plt.xlabel('Budget')
plt.show()

correlation_matrix = movies.corr(method='pearson', numeric_only=True)
plt.figure(figsize=(10,5))

# Create heatmap
sns.heatmap(
    correlation_matrix,
    annot = True,
    fmt = '.2f',
    cmap = 'coolwarm'
)

plt.title('Correlation Matrix', fontsize=15)
plt.xlabel(None)
plt.ylabel(None)
plt.show()

"""Visualisasi dari correlation matrix menunjukkan korelas untuk setiap features dalam dataset (numeric only). Untuk setiap features memiliki korelasi positif, namun dapat dilihat korelasi features seperti score dan year hanya memiliki korelasi 0.08 yang mendekati 0 sehingga korelasi yang dimiliki sangat kecil."""

# Change the object/string data type tu numeric
for col in movies.select_dtypes(include=['object']).columns:
    movies[col] = movies[col].astype('category').cat.codes

movies.corr()['gross'].sort_values(ascending=False)

plt.figure(figsize=(15,8))
sns.heatmap(movies.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""Dari visualisasi correlation matrix di atas diperoleh hasil korelasi untuk setiap features dalam movies dataset. Untuk melihat features yang paling berpengaruh terhadap pendapatan film adalah:

*   votes = 0.61
*   budget = 0.582
*   score = 0.205

Lalu juga terdapat features yang berbanding terbalik dengan pendapatan film, yaitu genre.




"""